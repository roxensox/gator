// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
	INSERT INTO feed_follows (
		id,
		created_at,
		updated_at,
		u_id,
		f_id
	) VALUES (
		$1,
		$2,
		$3,
		$4,
		$5
		)
	RETURNING id, created_at, updated_at, u_id, f_id
) SELECT inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.u_id, inserted_feed_follow.f_id, 
	users.name AS user_name,
	feeds.name AS feed_name,
	feeds.url AS feed_url
FROM inserted_feed_follow
INNER JOIN users ON inserted_feed_follow.u_id = users.id
INNER JOIN feeds ON inserted_feed_follow.f_id = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UID       uuid.UUID
	FID       uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UID       uuid.UUID
	FID       uuid.UUID
	UserName  string
	FeedName  string
	FeedUrl   string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UID,
		arg.FID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UID,
		&i.FID,
		&i.UserName,
		&i.FeedName,
		&i.FeedUrl,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.u_id, feed_follows.f_id,
	users.name AS user_name,
	feeds.name AS feed_name,
	feeds.url AS feed_url
FROM feed_follows
INNER JOIN users ON feed_follows.u_id = users.id
INNER JOIN feeds ON feed_follows.f_id = feeds.id
WHERE feed_follows.u_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UID       uuid.UUID
	FID       uuid.UUID
	UserName  string
	FeedName  string
	FeedUrl   string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, uID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, uID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UID,
			&i.FID,
			&i.UserName,
			&i.FeedName,
			&i.FeedUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
